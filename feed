#!/usr/bin/env bash

# === FEED.SH ===
# by Satoshi Soma (github.com/amekusa)

_err() {
	echo "[ERR] $1"
	exit 1
}

_main() {
	local ctx=''
	local err=false
	local file=()
	local cmd=''
	local replace='{item}'
	local write=''
	local parallel=false
	while [ $# -gt 0 ]; do
		case "$ctx" in
		cmd) # cmd context
			cmd="$cmd $1"
			;;
		*)
			case "$1" in
			-f|--file)
				ctx=file
				;;
			-c|--cmd)
				ctx=cmd
				;;
			-r|--replace)
				ctx=replace
				;;
			-w|--write)
				ctx=write
				;;
			-p|--parallel)
				parallel=true
				;;
			-*)
				err=true
				;;
			*)
				case "$ctx" in
				# contextual args
				file)
					file+=("$1")
					;;
				replace)
					replace="$1"
					;;
				write)
					[ -n "$write" ] && _err "multiple files for -w option are not supported"
					write="$1"
					;;
				*)
					err=true
					;;
				esac
				;;
			esac
			;;
		esac
		$err && _err "invalid argument: '$1'"
		shift
	done

	[ -z "$cmd" ] && _err "specify command to run"
	cmd="${cmd:1}"

	local tmp
	if [ -n "$write" ]; then
		tmp="$(mktemp)" || _err "failed to create a temp file"
		cat <<- EOF > "$tmp"
		# Failed Items @ $(date +'%F %H:%M:%S')
		# command: $cmd

		EOF
	fi

	local f; for f in "${file[@]}"; do
		local IFS line
		while IFS= read -r line; do
			# skip blank lines and comment lines
			if [ -z "$line" ] || [[ "$line" =~ ^[[:space:]]*# ]]; then
				continue
			fi
			# run cmd
			local _cmd="${cmd//"$replace"/"$line"}" # replace '{item}' in $cmd with $line
			if $parallel; then
				_run "$_cmd" "$line" "$tmp" &
			else
				_run "$_cmd" "$line" "$tmp"
			fi
		done < "$f"
	done

	$parallel && wait

	cp "$tmp" "$write"
	rm "$tmp"
}

_run() {
	local out
	if out="$(eval "$1" 2>&1)"; then
		echo "$(date +'%H:%M:%S') [DONE] $1"
		return 0
	else
		local code="$?"
		echo "$(date +'%H:%M:%S') [FAIL] $1"
		if [ -n "$3" ]; then
			cat <<- EOF >> "$3"
			# $(date +'%F %H:%M:%S'), code:$code, err:$out
			$2

			EOF
		fi
		return 1
	fi
}

_main "$@"

